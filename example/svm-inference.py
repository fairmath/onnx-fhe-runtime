import onnx
import numpy as np
import onnxruntime as ort
import os
from onnx import helper
from onnx import OperatorSetIdProto
from pathlib import Path

from openfhe import *

def generate_keys():
    parameters = CCParamsCKKSRNS()
    parameters.SetRingDim(65536)
    parameters.SetScalingModSize(47)
    parameters.SetBatchSize(32768)
    parameters.SetFirstModSize(60)
    parameters.SetScalingTechnique(FLEXIBLEAUTO)
    parameters.SetSecurityLevel(SecurityLevel.HEStd_NotSet)

    parameters.SetMultiplicativeDepth(28)
    cc = GenCryptoContext(parameters)

    cc.Enable(PKESchemeFeature.PKE)
    cc.Enable(PKESchemeFeature.KEYSWITCH)
    cc.Enable(PKESchemeFeature.LEVELEDSHE)
    cc.Enable(PKESchemeFeature.ADVANCEDSHE)
    cc.Enable(PKESchemeFeature.FHE)

    serverKP = cc.KeyGen()

    cc.EvalMultKeyGen(serverKP.secretKey)
    cc.EvalRotateKeyGen(serverKP.secretKey, [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384])

    return [cc, serverKP]


option = ort.SessionOptions()
option.register_custom_ops_library(os.getcwd()+'/../build/install/lib/libonnx-fhe-runtime.so')

onnx_opset = OperatorSetIdProto()
onnx_opset.domain = ''  # default domain: 'ai.onnx'
onnx_opset.version = 22

matmul = OperatorSetIdProto()
matmul.domain = 'fhe.ckks.svm'
matmul.version = 1 

loader = OperatorSetIdProto()
loader.domain = 'fhe.ckks.loader'
loader.version = 1

saver = OperatorSetIdProto()
saver.domain = 'fhe.ckks.saver'
saver.version = 1

sess = ort.InferenceSession('fhe-svm-rbf.onnx', sess_options=option)

cc, kp = generate_keys()

data_arr = [[1.22919953e+00, 1.22505498e-01, 1.99927546e+00, -6.79097591e-01, 1.97346089e+00, -5.37260953e-01],
 [ 1.22919953e+00,  1.22505498e-01,  1.99927546e+00, -6.79097591e-01, 1.97346089e+00, -5.37260953e-01],
 [-3.19247925e-01,  4.75318860e-01,  1.69739499e+00,  1.37494797e-01, 1.31883862e+00,  7.04069672e-01],
 [ 1.66483053e+00,  1.41425126e+00, -5.79027349e-01,  2.33147584e+00, -4.73588781e-01,  9.11427682e-01],
 [-1.47557209e+00, -4.16260343e-02, -1.60825590e+00, -3.62640925e+00, -9.00115658e-01, -2.54814666e+00],
 [ 8.03819678e-01, -6.29871646e-01, -6.85812318e-01,  1.04413997e-01, -1.83469154e-01,  1.47227880e+00],
 [ 6.90578178e-01,  1.70616397e+00, -1.51684331e+00,  1.65212566e+00, 5.17015730e-01,  2.24929862e-01],
 [ 1.62902286e+00,  2.72647048e-02,  2.06632769e-01,  1.42916088e+00, -1.35100308e-01,  1.48930053e+00],
 [ 1.96024970e+00,  9.16171266e-01,  1.35811397e+00, -3.41358188e-01, 1.09036291e+00, -1.52109123e+00],
 [ 4.17419549e-01,  1.18197405e+00, -8.70145440e-01,  1.16346137e+00, 3.58171845e-01,  5.05068134e-01],
 [ 3.22249342e-01, -2.10016698e-01,  5.66440047e-01,  1.72060190e+00, -9.47539787e-01,  1.62140313e-01],
 [ 1.73086087e+00,  1.64209617e+00, -3.47865686e+00,  2.54751325e-01, -3.88122827e-02,  1.85130784e+00],
 [-7.53902012e-01,  1.56281357e+00,  1.86511899e+00, -3.87964970e-01, 5.55640240e-01, -1.53246753e-02],
 [-2.08914158e+00, -1.81930045e+00, -2.19558436e+00, -1.83949271e+00, 9.14605516e-01, -1.72240743e+00],
 [-4.17287935e-01, -7.52446700e-01, -2.26931025e-01, -1.59506087e+00, 1.67374816e+00, -2.22734793e+00],
 [-1.45389964e+00,  1.24197060e+00,  1.75746277e+00, -2.36965849e+00, -8.57631692e-02, -8.12782614e-01],
 [ 1.06536037e+00, -1.21050116e+00,  2.87926360e+00,  9.50624398e-01, -1.61341066e+00, -5.93962399e-02],
 [ 3.62938940e+00,  8.28153490e-01,  1.65715407e+00, -1.75424218e+00, 1.00989496e+00, -2.27354208e+00],
 [-1.28991462e+00, -1.72958009e+00,  8.49577567e-01, -1.10542219e+00, 1.24171396e+00, -1.57380959e+00],
 [ 3.38798371e-01, -5.59741975e-01,  2.93656449e-01, -8.38036129e-01, 1.50502511e+00, -9.50686106e-01],
 [ 1.60367345e+00,  8.70352281e-02, -3.73488619e+00,  9.46419363e-01, -9.47341380e-01,  1.27713551e+00],
 [-1.96286912e+00,  4.37026681e-02, -1.55570857e+00, -9.62365544e-01, 1.07368201e+00, -9.03740286e-01],
 [-1.17403934e+00,  8.66849063e-01, -9.23424380e-01,  2.01473290e-01, 4.71036831e-01, -6.58958106e-01],
 [ 4.34543600e-01, -4.02451109e-01, -2.14256850e+00,  1.06175802e+00, -4.29138035e-01,  3.99610450e-01],
 [ 2.03215697e-01, -1.97962969e-01,  6.47944371e-01,  1.14966383e+00, 4.76828094e-01, -1.68138965e+00],
 [ 4.89787011e-01,  8.20245739e-01,  2.03326684e+00, -4.14657549e-01, -1.70727716e+00,  5.35130464e-01],
 [ 1.27171688e+00, -1.40021555e+00, -1.31725220e+00, -3.56759206e+00, 2.29662464e-01, -3.12210932e+00],
 [-1.85561668e-01, -7.96502959e-01,  2.20986914e-01, -3.98388793e-01, 6.60775232e-01,  1.00771366e+00],
 [ 1.74676195e+00,  5.31916892e-01,  1.71161946e+00, -1.66476892e+00, 6.96351127e-01, -1.01607532e+00],
 [ 2.27687003e+00,  5.16124729e-01,  7.23155628e-01, -1.90249220e+00, 4.75493641e-01, -1.94640494e+00],
 [-1.76203160e+00, -2.14585676e+00, -1.72833936e+00, -9.02182123e-01, 5.12941251e-01, -1.50146854e-01],
 [ 8.68629755e-01, -1.11972521e-01, -2.23013398e+00,  3.32519447e-01, 3.26423365e-01,  1.20624516e+00],
 [-5.29520254e-01, -2.17668139e+00, -8.25525142e-02, -2.91515460e-01, -3.91034001e-01, -4.28523805e+00],
 [ 1.55512746e-01, -1.05463689e+00, -1.75962859e-01,  4.97125344e-01, -7.29474102e-01,  6.61715495e-01],
 [-1.86466254e+00,  2.37514820e-02, -2.16548592e+00,  8.99366231e-01, 3.15635977e-01,  8.35171313e-01],
 [-8.77639591e-01, -3.51969385e-02, -4.52092660e-01, -2.32755269e+00, 5.65589496e-02, -2.30918662e+00],
 [-8.54893268e-02,  1.99804954e+00,  1.85828861e+00, -5.69400288e-01, -1.57952076e+00,  1.26512606e+00],
 [-5.06601851e-01,  2.08447723e+00,  1.59089363e+00, -4.15954349e-02, 1.39090350e+00, -9.15800778e-01],
 [-1.69886225e+00, -1.76412690e+00, -2.25704953e+00, -2.42055451e+00, 1.49988868e+00, -1.77065216e+00],
 [ 9.65725535e-01, -3.29273707e-01, -7.86281348e-01,  1.30257200e+00, -4.70281447e-01,  8.05242178e-01],
 [-2.29243930e-01, -3.58209200e-01, -6.95269077e-02,  1.13020923e+00, 9.01863437e-01, -2.89769197e-02],
 [ 1.46438521e+00,  5.51558764e-02, -1.86009472e+00,  8.23649715e-01, 2.50568921e+00,  1.33130888e+00],
 [-5.78371381e-01,  7.11454265e-01,  1.56261634e+00, -9.26267026e-01, -2.89377947e-01, -1.56740048e+00],
 [-1.61544894e+00,  9.87493006e-01,  1.16729579e+00, -6.97839202e-01, 7.64204388e-01,  6.89330498e-01],
 [-1.24656588e+00,  1.18880101e+00,  7.06758414e-01, -1.16810306e+00, -4.13084306e-02, -1.55124887e+00],
 [ 2.58540481e+00, -5.73753800e-01,  3.82421001e-01, -2.25416655e+00, -6.80744275e-01, -1.95019273e+00],
 [-3.29932660e-01,  1.29515380e-02,  1.24441825e+00,  1.03174124e+00, -8.75698742e-01,  6.49398767e-01],
 [-6.69131982e-01, -1.86735183e+00, -5.36290261e-01, -7.83525213e-01, -7.64791387e-01, -8.81508756e-01],
 [-5.10652488e-01, -1.28029113e+00,  3.57091149e-02, -3.05948860e-01, -1.30160333e+00, -1.40816562e+00],
 [-1.31131901e+00, -1.01861945e+00,  1.25752701e+00,  1.95949858e+00, 2.97619693e+00, -1.35484635e+00]]

res = []

for data in data_arr:

    encoded_1 = cc.MakeCKKSPackedPlaintext(data)
    ciphertext1 = cc.Encrypt(kp.publicKey, encoded_1)
    if not SerializeToFile("c1.bin", ciphertext1, BINARY):
        raise Exception("Exception writing ciphertext to ciphertext.txt")

    if not SerializeToFile('cc.bin', cc, BINARY):
        raise Exception("Exception writing cryptocontext to cryptocontext.txt")

    if not cc.SerializeEvalMultKey('mk.bin', BINARY):
        raise Exception("Error writing eval mult keys")

    if not cc.SerializeEvalAutomorphismKey('rk.bin', BINARY):
        raise Exception("Error writing rotation keys")

    if not SerializeToFile('pk.bin', kp.publicKey, BINARY):
        raise Exception("error writing public key")

    rk_np = np.array(['rk.bin'], dtype=object)
    mk_np = np.array([''], dtype=object)
    cc_np = np.array(['cc.bin'], dtype=object)
    c1_np = np.array(['c1.bin'], dtype=object)
    pk_np = np.array(['pk.bin'], dtype=object)

    results = sess.run(None, {'cc': cc_np, 'rk': rk_np, 'mk': mk_np, 'in': c1_np, 'pk': pk_np})

    rc, ok = DeserializeCiphertext(results[0][0], BINARY)
    if not ok:
        raise Exception("can't deserialize crypto context")

    plaintext = cc.Decrypt(kp.secretKey, rc)
    rv = plaintext.GetRealPackedValue()
    rv = rv[:1]

    print('FHE MODEL:')
    print(rv)

    print('ORIGINAL MODEL')
    mod = ort.InferenceSession('svm_rbf.onnx')
    minput = np.array(data, dtype=np.float32).reshape(1, 6)
    mresults = mod.run(None, {'input': minput})
    print(mresults[0].tolist()[0])

    res.append([rv[:1][0], mresults[0].tolist()[0]])
    for file in Path('.').glob('*.bin'):
        file.unlink()

for r in res:
    print(f"FHE: {r[0]}; ORIGIN: {r[1]}")

# Linear Kernel Results
# FHE: 0.3956211750366705; ORIGIN: 1
# FHE: 0.3956210740399905; ORIGIN: 1
# FHE: 1.5238407520652655; ORIGIN: 1
# FHE: 1.083025682817111; ORIGIN: 1
# FHE: -2.707137428811698; ORIGIN: -1
# FHE: 0.34647047369467043; ORIGIN: 1
# FHE: 0.9999735233259172; ORIGIN: 1
# FHE: 1.0130261796306748; ORIGIN: 1
# FHE: -0.4139474151582823; ORIGIN: -1
# FHE: 0.9646659686086148; ORIGIN: 1
# FHE: 0.9600797188970297; ORIGIN: 1
# FHE: -0.17992575732206578; ORIGIN: -1
# FHE: 0.9283557300290715; ORIGIN: 1
# FHE: -0.7226124053355913; ORIGIN: -1
# FHE: -0.6604674665136276; ORIGIN: -1
# FHE: -0.4657880394760848; ORIGIN: -1
# FHE: 0.36543546558032014; ORIGIN: 1
# FHE: -2.014292029921816; ORIGIN: -1
# FHE: 0.15724553342121547; ORIGIN: 1
# FHE: -0.03121393874533865; ORIGIN: -1
# FHE: -0.35682256827133574; ORIGIN: -1
# FHE: 0.22834302942364915; ORIGIN: 1
# FHE: 0.6139897608815155; ORIGIN: 1
# FHE: 0.2981777908022063; ORIGIN: 1
# FHE: 0.5963641283375826; ORIGIN: 1
# FHE: -0.14045685681178235; ORIGIN: -1
# FHE: -3.3987783437433747; ORIGIN: -1
# FHE: 0.7255100027085508; ORIGIN: 1
# FHE: -1.0003182278346172; ORIGIN: -1
# FHE: -1.895097772016085; ORIGIN: -1
# FHE: 0.14736674491650098; ORIGIN: 1
# FHE: 0.2689887731587224; ORIGIN: 1
# FHE: -1.329021086343032; ORIGIN: -1
# FHE: 0.41171223360767706; ORIGIN: 1
# FHE: 1.4289714843440706; ORIGIN: 1
# FHE: -1.543304167601236; ORIGIN: -1
# FHE: 0.2615253831722449; ORIGIN: 1
# FHE: 1.0004102203275222; ORIGIN: 1
# FHE: -1.0004730134937114; ORIGIN: -1
# FHE: 0.6271551703329494; ORIGIN: 1
# FHE: 1.298357255196383; ORIGIN: 1
# FHE: 1.2377631235769446; ORIGIN: 1
# FHE: -0.3363232782940694; ORIGIN: -1
# FHE: 1.215970722727947; ORIGIN: 1
# FHE: -0.293318240161695; ORIGIN: -1
# FHE: -2.7123728623605428; ORIGIN: -1
# FHE: 1.1230742793003525; ORIGIN: 1
# FHE: -0.6366494880192415; ORIGIN: -1
# FHE: -0.6674285673370517; ORIGIN: -1
# FHE: 2.6799603313769698; ORIGIN: 1

# RBF Kernel Results
# FHE: -0.14667303273947527; ORIGIN: -1
# FHE: -0.14667326941947523; ORIGIN: -1
# FHE: 0.727027811308135; ORIGIN: 1
# FHE: 0.9999871310274189; ORIGIN: 1
# FHE: -1.0000829360529548; ORIGIN: -1
# FHE: 0.5367157112246632; ORIGIN: 1
# FHE: 0.9995755961734132; ORIGIN: 1
# FHE: 1.0000532334182632; ORIGIN: 1
# FHE: -1.000060303737198; ORIGIN: -1
# FHE: 0.9999974507122031; ORIGIN: 1
# FHE: 0.3351667517064153; ORIGIN: 1
# FHE: 0.08127895484561243; ORIGIN: 1
# FHE: 0.9998580458181092; ORIGIN: 1
# FHE: -0.9354692882494782; ORIGIN: -1
# FHE: -0.9151255487333649; ORIGIN: -1
# FHE: 1.0001032101083878; ORIGIN: 1
# FHE: -0.1155591616678773; ORIGIN: -1
# FHE: -0.9999792910732839; ORIGIN: -1
# FHE: 0.9998033689408901; ORIGIN: 1
# FHE: -0.27306404569415654; ORIGIN: -1
# FHE: 0.9999266669819136; ORIGIN: 1
# FHE: -0.9999958850497561; ORIGIN: -1
# FHE: -0.9998481323776844; ORIGIN: -1
# FHE: 0.25471437390611457; ORIGIN: 1
# FHE: 0.9999698669098548; ORIGIN: 1
# FHE: -0.9997489042965579; ORIGIN: -1
# FHE: -1.000058265927783; ORIGIN: -1
# FHE: -0.04604970172203884; ORIGIN: -1
# FHE: -0.9999419121273526; ORIGIN: -1
# FHE: -0.9996815368194288; ORIGIN: -1
# FHE: -0.999826009752924; ORIGIN: -1
# FHE: 0.2471223618125579; ORIGIN: 1
# FHE: -0.06909290497028972; ORIGIN: -1
# FHE: 0.9341158185950641; ORIGIN: 1
# FHE: -0.1591908254377073; ORIGIN: -1
# FHE: -0.9998477500293623; ORIGIN: -1
# FHE: -1.0001344516491533; ORIGIN: -1
# FHE: 0.9999098905817008; ORIGIN: 1
# FHE: -1.0000792148640683; ORIGIN: -1
# FHE: 1.0000049718996562; ORIGIN: 1
# FHE: 0.2117899221313108; ORIGIN: 1
# FHE: 0.31100961218020606; ORIGIN: 1
# FHE: 0.99965115015982; ORIGIN: 1
# FHE: 0.1747433415786952; ORIGIN: 1
# FHE: 1.000166808645002; ORIGIN: 1
# FHE: -0.39991429304486537; ORIGIN: -1
# FHE: 0.27165999139408553; ORIGIN: 1
# FHE: -1.00029647803337; ORIGIN: -1
# FHE: -1.0000503416233977; ORIGIN: -1
# FHE: 0.9568704636464526; ORIGIN: 1
